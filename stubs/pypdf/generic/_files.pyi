"""
This type stub file was generated by pyright.
"""

import datetime
from typing import TYPE_CHECKING
from pypdf.generic import ByteStringObject, DictionaryObject, NameObject, NumberObject, TextStringObject

if TYPE_CHECKING:
    ...
class EmbeddedFile:
    """
    Container holding the information on an embedded file.

    Attributes are evaluated lazily if possible.

    Further information on embedded files can be found in section 7.11 of the PDF 2.0 specification.
    """
    def __init__(self, name: str, pdf_object: DictionaryObject) -> None:
        """
        Args:
            name: The (primary) name as provided in the name tree.
            pdf_object: The corresponding PDF object to allow retrieving further data.
        """
        ...

    @property
    def name(self) -> str:
        """The (primary) name of the embedded file as provided in the name tree."""
        ...

    @property
    def alternative_name(self) -> str | None:
        """Retrieve the alternative name (file specification)."""
        ...

    @alternative_name.setter
    def alternative_name(self, value: TextStringObject | None) -> None:
        """Set the alternative name (file specification)."""
        ...

    @property
    def description(self) -> str | None:
        """Retrieve the description."""
        ...

    @description.setter
    def description(self, value: TextStringObject | None) -> None:
        """Set the description."""
        ...

    @property
    def associated_file_relationship(self) -> str:
        """Retrieve the relationship of the referring document to this embedded file."""
        ...

    @associated_file_relationship.setter
    def associated_file_relationship(self, value: NameObject) -> None:
        """Set the relationship of the referring document to this embedded file."""
        ...

    @property
    def subtype(self) -> str | None:
        """Retrieve the subtype. This is a MIME media type, prefixed by a slash."""
        ...

    @subtype.setter
    def subtype(self, value: NameObject | None) -> None:
        """Set the subtype. This should be a MIME media type, prefixed by a slash."""
        ...

    @property
    def content(self) -> bytes:
        """Retrieve the actual file content."""
        ...

    @content.setter
    def content(self, value: str | bytes) -> None:
        """Set the file content."""
        ...

    @property
    def size(self) -> int | None:
        """Retrieve the size of the uncompressed file in bytes."""
        ...

    @size.setter
    def size(self, value: NumberObject | None) -> None:
        """Set the size of the uncompressed file in bytes."""
        ...

    @property
    def creation_date(self) -> datetime.datetime | None:
        """Retrieve the file creation datetime."""
        ...

    @creation_date.setter
    def creation_date(self, value: datetime.datetime | None) -> None:
        """Set the file creation datetime."""
        ...

    @property
    def modification_date(self) -> datetime.datetime | None:
        """Retrieve the datetime of the last file modification."""
        ...

    @modification_date.setter
    def modification_date(self, value: datetime.datetime | None) -> None:
        """Set the datetime of the last file modification."""
        ...

    @property
    def checksum(self) -> bytes | None:
        """Retrieve the MD5 checksum of the (uncompressed) file."""
        ...

    @checksum.setter
    def checksum(self, value: ByteStringObject | None) -> None:
        """Set the MD5 checksum of the (uncompressed) file."""
        ...

    def __repr__(self) -> str:
        ...
