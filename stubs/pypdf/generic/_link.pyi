"""
This type stub file was generated by pyright.
"""

from typing import List, TYPE_CHECKING, Tuple, Union
from . import ArrayObject, IndirectObject, TextStringObject
from .._page import PageObject
from .._reader import PdfReader
from .._writer import PdfWriter

if TYPE_CHECKING:
    ...
class NamedReferenceLink:
    """Named reference link being preserved until we can resolve it correctly."""
    def __init__(self, reference: TextStringObject, source_pdf: PdfReader) -> None:
        """reference: TextStringObject with named reference"""
        ...

    def find_referenced_page(self) -> Union[IndirectObject, None]:
        ...

    def patch_reference(self, target_pdf: PdfWriter, new_page: IndirectObject) -> None:
        """target_pdf: PdfWriter which the new link went into"""
        ...



class DirectReferenceLink:
    """Direct reference link being preserved until we can resolve it correctly."""
    def __init__(self, reference: ArrayObject) -> None:
        """reference: an ArrayObject whose first element is the Page indirect object"""
        ...

    def find_referenced_page(self) -> IndirectObject:
        ...

    def patch_reference(self, target_pdf: PdfWriter, new_page: IndirectObject) -> None:
        """target_pdf: PdfWriter which the new link went into"""
        ...



ReferenceLink = Union[NamedReferenceLink, DirectReferenceLink]
def extract_links(new_page: PageObject, old_page: PageObject) -> List[Tuple[ReferenceLink, ReferenceLink]]:
    """Extracts links from two pages on the assumption that the two pages are
    the same. Produces one list of (new link, old link) tuples.
    """
    ...
