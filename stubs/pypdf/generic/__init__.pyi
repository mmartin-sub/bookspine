"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Tuple, Union
from .._utils import deprecation_with_replacement
from ..constants import OutlineFontFlag
from ._base import BooleanObject, ByteStringObject, FloatObject, IndirectObject, NameObject, NullObject, NumberObject, PdfObject, TextStringObject, encode_pdfdocencoding, is_null_or_none
from ._data_structures import ArrayObject, ContentStream, DecodedStreamObject, Destination, DictionaryObject, EncodedStreamObject, Field, StreamObject, TreeObject, read_object
from ._files import EmbeddedFile
from ._fit import Fit
from ._link import DirectReferenceLink, NamedReferenceLink, ReferenceLink, extract_links
from ._outline import OutlineItem
from ._rectangle import RectangleObject
from ._utils import create_string_object, decode_pdfdocencoding, hex_to_rgb, read_hex_string_from_stream, read_string_from_stream
from ._viewerpref import ViewerPreferences

"""Implementation of generic PDF objects (dictionary, number, string, ...)."""
__author__ = ...
__author_email__ = ...
PAGE_FIT = ...
class AnnotationBuilder:
    """
    The AnnotationBuilder is deprecated.

    Instead, use the annotation classes in pypdf.annotations.

    See `adding PDF annotations <../user/adding-pdf-annotations.html>`_ for
    its usage combined with PdfWriter.
    """
    @staticmethod
    def text(rect: Union[RectangleObject, Tuple[float, float, float, float]], text: str, open: bool = ..., flags: int = ...) -> None:
        ...

    @staticmethod
    def free_text(text: str, rect: Union[RectangleObject, Tuple[float, float, float, float]], font: str = ..., bold: bool = ..., italic: bool = ..., font_size: str = ..., font_color: str = ..., border_color: Optional[str] = ..., background_color: Optional[str] = ...) -> None:
        ...

    @staticmethod
    def popup(*, rect: Union[RectangleObject, Tuple[float, float, float, float]], flags: int = ..., parent: Optional[DictionaryObject] = ..., open: bool = ...) -> None:
        ...

    @staticmethod
    def line(p1: Tuple[float, float], p2: Tuple[float, float], rect: Union[RectangleObject, Tuple[float, float, float, float]], text: str = ..., title_bar: Optional[str] = ...) -> None:
        ...

    @staticmethod
    def polyline(vertices: List[Tuple[float, float]]) -> None:
        ...

    @staticmethod
    def rectangle(rect: Union[RectangleObject, Tuple[float, float, float, float]], interiour_color: Optional[str] = ...) -> None:
        ...

    @staticmethod
    def highlight(*, rect: Union[RectangleObject, Tuple[float, float, float, float]], quad_points: ArrayObject, highlight_color: str = ..., printing: bool = ...) -> None:
        ...

    @staticmethod
    def ellipse(rect: Union[RectangleObject, Tuple[float, float, float, float]], interiour_color: Optional[str] = ...) -> None:
        ...

    @staticmethod
    def polygon(vertices: List[Tuple[float, float]]) -> None:
        ...

    @staticmethod
    def link(rect: Union[RectangleObject, Tuple[float, float, float, float]], border: Optional[ArrayObject] = ..., url: Optional[str] = ..., target_page_index: Optional[int] = ..., fit: Fit = ...) -> None:
        ...



__all__ = ["PAGE_FIT", "AnnotationBuilder", "ArrayObject", "BooleanObject", "ByteStringObject", "ContentStream", "DecodedStreamObject", "Destination", "DictionaryObject", "DirectReferenceLink", "EmbeddedFile", "EncodedStreamObject", "Field", "Fit", "FloatObject", "IndirectObject", "NameObject", "NamedReferenceLink", "NullObject", "NumberObject", "OutlineFontFlag", "OutlineItem", "PdfObject", "RectangleObject", "ReferenceLink", "StreamObject", "TextStringObject", "TreeObject", "ViewerPreferences", "create_string_object", "decode_pdfdocencoding", "encode_pdfdocencoding", "extract_links", "hex_to_rgb", "is_null_or_none", "read_hex_string_from_stream", "read_object", "read_string_from_stream"]
