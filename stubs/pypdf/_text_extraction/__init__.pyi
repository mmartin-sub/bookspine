"""
This type stub file was generated by pyright.
"""

import math
from typing import Any, Callable, Dict, List, Optional, Tuple, Union
from ..generic import DictionaryObject, TextStringObject, encode_pdfdocencoding

"""
Code related to text extraction.

Some parts are still in _page.py. In doubt, they will stay there.
"""
CUSTOM_RTL_MIN: int = ...
CUSTOM_RTL_MAX: int = ...
CUSTOM_RTL_SPECIAL_CHARS: List[int] = ...
LAYOUT_NEW_BT_GROUP_SPACE_WIDTHS: int = ...
class OrientationNotFoundError(Exception):
    ...


def set_custom_rtl(_min: Union[str, int, None] = ..., _max: Union[str, int, None] = ..., specials: Union[str, List[int], None] = ...) -> Tuple[int, int, List[int]]:
    """
    Change the Right-To-Left and special characters custom parameters.

    Args:
        _min: The new minimum value for the range of custom characters that
            will be written right to left.
            If set to ``None``, the value will not be changed.
            If set to an integer or string, it will be converted to its ASCII code.
            The default value is -1, which sets no additional range to be converted.
        _max: The new maximum value for the range of custom characters that will
            be written right to left.
            If set to ``None``, the value will not be changed.
            If set to an integer or string, it will be converted to its ASCII code.
            The default value is -1, which sets no additional range to be converted.
        specials: The new list of special characters to be inserted in the
            current insertion order.
            If set to ``None``, the current value will not be changed.
            If set to a string, it will be converted to a list of ASCII codes.
            The default value is an empty list.

    Returns:
        A tuple containing the new values for ``CUSTOM_RTL_MIN``,
        ``CUSTOM_RTL_MAX``, and ``CUSTOM_RTL_SPECIAL_CHARS``.

    """
    ...

def mult(m: List[float], n: List[float]) -> List[float]:
    ...

def orient(m: List[float]) -> int:
    ...

def crlf_space_check(text: str, cmtm_prev: Tuple[List[float], List[float]], cmtm_matrix: Tuple[List[float], List[float]], memo_cmtm: Tuple[List[float], List[float]], cmap: Tuple[Union[str, Dict[int, str]], Dict[str, str], str, Optional[DictionaryObject]], orientations: Tuple[int, ...], output: str, font_size: float, visitor_text: Optional[Callable[[Any, Any, Any, Any, Any], None]], str_widths: float, spacewidth: float, str_height: float) -> Tuple[str, str, List[float], List[float]]:
    ...

def get_text_operands(operands: List[Union[str, TextStringObject]], cm_matrix: List[float], tm_matrix: List[float], cmap: Tuple[Union[str, Dict[int, str]], Dict[str, str], str, Optional[DictionaryObject]], orientations: Tuple[int, ...]) -> Tuple[str, bool]:
    ...

def get_display_str(text: str, cm_matrix: List[float], tm_matrix: List[float], cmap: Tuple[Union[str, Dict[int, str]], Dict[str, str], str, Optional[DictionaryObject]], text_operands: str, font_size: float, rtl_dir: bool, visitor_text: Optional[Callable[[Any, Any, Any, Any, Any], None]]) -> Tuple[str, bool]:
    ...
