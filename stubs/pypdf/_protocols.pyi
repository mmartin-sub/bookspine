"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from pathlib import Path
from typing import Any, Dict, IO, List, Optional, Protocol, Tuple, Union
from ._utils import StrByteType, StreamType

"""Helpers for working with PDF types."""
class PdfObjectProtocol(Protocol):
    indirect_reference: Any
    def clone(self, pdf_dest: Any, force_duplicate: bool = ..., ignore_fields: Union[Tuple[str, ...], List[str], None] = ...) -> Any:
        ...

    def get_object(self) -> Optional[PdfObjectProtocol]:
        ...

    def hash_value(self) -> bytes:
        ...

    def write_to_stream(self, stream: StreamType, encryption_key: Union[None, str, bytes] = ...) -> None:
        ...



class XmpInformationProtocol(PdfObjectProtocol):
    ...


class PdfCommonDocProtocol(Protocol):
    @property
    def pdf_header(self) -> str:
        ...

    @property
    def pages(self) -> List[Any]:
        ...

    @property
    def root_object(self) -> PdfObjectProtocol:
        ...

    def get_object(self, indirect_reference: Any) -> Optional[PdfObjectProtocol]:
        ...

    @property
    def strict(self) -> bool:
        ...



class PdfReaderProtocol(PdfCommonDocProtocol, Protocol):
    @property
    @abstractmethod
    def xref(self) -> Dict[int, Dict[int, Any]]:
        ...

    @property
    @abstractmethod
    def trailer(self) -> Dict[str, Any]:
        ...



class PdfWriterProtocol(PdfCommonDocProtocol, Protocol):
    _objects: List[Any]
    _id_translated: Dict[int, Dict[int, int]]
    incremental: bool
    _reader: Any
    @abstractmethod
    def write(self, stream: Union[Path, StrByteType]) -> Tuple[bool, IO[Any]]:
        ...
