"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Optional, Union
from .generic import DictionaryObject

"""
Implementation of stream filters for PDF.

See TABLE H.1 Abbreviations for standard filter names
"""
__author__ = ...
__author_email__ = ...
def decompress(data: bytes) -> bytes:
    """
    Decompress the given data using zlib.

    Attempts to decompress the input data using zlib.
    If the decompression fails due to a zlib error, it falls back
    to using a decompression object with a larger window size.

    Args:
        data: The input data to be decompressed.

    Returns:
        The decompressed data.

    """
    ...

class FlateDecode:
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decode data which is flate-encoded.

        Args:
          data: flate-encoded data.
          decode_parms: a dictionary of values, understanding the
            "/Predictor":<int> key only

        Returns:
          The flate-decoded data.

        Raises:
          PdfReadError:

        """
        ...
    
    @staticmethod
    def encode(data: bytes, level: int = ...) -> bytes:
        """
        Compress the input data using zlib.

        Args:
            data: The data to be compressed.
            level: See https://docs.python.org/3/library/zlib.html#zlib.compress

        Returns:
            The compressed data.

        """
        ...
    


class ASCIIHexDecode:
    """
    The ASCIIHexDecode filter decodes data that has been encoded in ASCII
    hexadecimal form into a base-7 ASCII format.
    """
    @staticmethod
    def decode(data: Union[str, bytes], decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decode an ASCII-Hex encoded data stream.

        Args:
          data: a str sequence of hexadecimal-encoded values to be
            converted into a base-7 ASCII string
          decode_parms: this filter does not use parameters.

        Returns:
          A string conversion in base-7 ASCII, where each of its values
          v is such that 0 <= ord(v) <= 127.

        Raises:
          PdfStreamError:

        """
        ...
    


class RunLengthDecode:
    """
    The RunLengthDecode filter decodes data that has been encoded in a
    simple byte-oriented format based on run length.
    The encoded data is a sequence of runs, where each run consists of
    a length byte followed by 1 to 128 bytes of data. If the length byte is
    in the range 0 to 127,
    the following length + 1 (1 to 128) bytes are copied literally during
    decompression.
    If length is in the range 129 to 255, the following single byte is to be
    copied 257 − length (2 to 128) times during decompression. A length value
    of 128 denotes EOD.
    """
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decode a run length encoded data stream.

        Args:
          data: a bytes sequence of length/data
          decode_parms: this filter does not use parameters.

        Returns:
          A bytes decompressed sequence.

        Raises:
          PdfStreamError:

        """
        ...
    


class LZWDecode:
    class Decoder:
        STOP = ...
        CLEARDICT = ...
        def __init__(self, data: bytes) -> None:
            ...
        
        def decode(self) -> bytes:
            ...
        
    
    
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> str:
        """
        Decode an LZW encoded data stream.

        Args:
          data: ``bytes`` or ``str`` text to decode.
          decode_parms: a dictionary of parameter values.

        Returns:
          decoded data.

        """
        ...
    


class ASCII85Decode:
    """Decodes string ASCII85-encoded data into a byte format."""
    @staticmethod
    def decode(data: Union[str, bytes], decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decode an Ascii85 encoded data stream.

        Args:
          data: ``bytes`` or ``str`` text to decode.
          decode_parms: this filter does not use parameters.

        Returns:
          decoded data.

        """
        ...
    


class DCTDecode:
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decompresses data encoded using a DCT (discrete cosine transform)
        technique based on the JPEG standard (IS0/IEC 10918),
        reproducing image sample data that approximates the original data.

        Args:
          data: text to decode.
          decode_parms: this filter does not use parameters.

        Returns:
          decoded data.

        """
        ...
    


class JPXDecode:
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        """
        Decompresses data encoded using the wavelet-based JPEG 2000 standard,
        reproducing the original image data.

        Args:
          data: text to decode.
          decode_parms: a dictionary of parameter values.

        Returns:
          decoded data.

        """
        ...
    


@dataclass
class CCITTParameters:
    """§7.4.6, optional parameters for the CCITTFaxDecode filter."""
    K: int = ...
    columns: int = ...
    rows: int = ...
    EndOfBlock: Union[int, None] = ...
    EndOfLine: Union[int, None] = ...
    EncodedByteAlign: Union[int, None] = ...
    DamagedRowsBeforeError: Union[int, None] = ...
    @property
    def group(self) -> int:
        ...
    


CCITParameters = ...
class CCITTFaxDecode:
    """
    §7.4.6, CCITTFaxDecode filter (ISO 32000).

    Either Group 3 or Group 4 CCITT facsimile (fax) encoding.
    CCITT encoding is bit-oriented, not byte-oriented.

    §7.4.6, optional parameters for the CCITTFaxDecode filter.
    """
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., height: int = ..., **kwargs: Any) -> bytes:
        ...
    


JBIG2DEC_BINARY = ...
class JBIG2Decode:
    @staticmethod
    def decode(data: bytes, decode_parms: Optional[DictionaryObject] = ..., **kwargs: Any) -> bytes:
        ...
    


def decode_stream_data(stream: Any) -> bytes:
    """
    Decode the stream data based on the specified filters.

    This function decodes the stream data using the filters provided in the
    stream.

    Args:
        stream: The input stream object containing the data and filters.

    Returns:
        The decoded stream data.

    Raises:
        NotImplementedError: If an unsupported filter type is encountered.

    """
    ...

