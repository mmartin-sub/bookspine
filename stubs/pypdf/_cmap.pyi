"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Tuple, Union
from .generic import DictionaryObject

def build_char_map(font_name: str, space_width: float, obj: DictionaryObject) -> Tuple[str, float, Union[str, Dict[int, str]], Dict[Any, Any], DictionaryObject]:
    """
    Determine information about a font.

    Args:
        font_name: font name as a string
        space_width: default space width if no data is found.
        obj: XObject or Page where you can find a /Resource dictionary

    Returns:
        Font sub-type, space_width criteria (50% of width), encoding, map character-map, font-dictionary.
        The font-dictionary itself is suitable for the curious.

    """
    ...

def build_char_map_from_dict(space_width: float, ft: DictionaryObject) -> Tuple[str, float, Union[str, Dict[int, str]], Dict[Any, Any]]:
    """
    Determine information about a font.

    Args:
        space_width: default space with if no data found
             (normally half the width of a character).
        ft: Font Dictionary

    Returns:
        Font sub-type, space_width criteria(50% of width), encoding, map character-map.
        The font-dictionary itself is suitable for the curious.

    """
    ...

unknown_char_map: Tuple[str, float, Union[str, Dict[int, str]], Dict[Any, Any]] = ...
_predefined_cmap: Dict[str, str] = ...
_default_fonts_space_width: Dict[str, int] = ...
def get_encoding(ft: DictionaryObject) -> Tuple[Union[str, Dict[int, str]], Dict[Any, Any]]:
    ...

def get_actual_str_key(value_char: str, encoding: Union[str, Dict[int, str]], map_dict: Dict[Any, Any]) -> str:
    ...

def prepare_cm(ft: DictionaryObject) -> bytes:
    ...

def process_cm_line(line: bytes, process_rg: bool, process_char: bool, multiline_rg: Union[None, Tuple[int, int]], map_dict: Dict[Any, Any], int_entry: List[int]) -> Tuple[bool, bool, Union[None, Tuple[int, int]]]:
    ...

def parse_bfrange(line: bytes, map_dict: Dict[Any, Any], int_entry: List[int], multiline_rg: Union[None, Tuple[int, int]]) -> Union[None, Tuple[int, int]]:
    ...

def parse_bfchar(line: bytes, map_dict: Dict[Any, Any], int_entry: List[int]) -> None:
    ...

def build_font_width_map(ft: DictionaryObject, default_font_width: float) -> Dict[Any, float]:
    ...

def compute_space_width(font_width_map: Dict[Any, float], space_char: str) -> float:
    ...

def compute_font_width(font_width_map: Dict[Any, float], char: str) -> float:
    ...

