"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import List, Union
from model2vec import StaticModel
from keybert.backend import BaseEmbedder

class Model2VecBackend(BaseEmbedder):
    """Model2Vec embedding model.

    Arguments:
        embedding_model: Either a model2vec model or a
                         string pointing to a model2vec model
        distill: Indicates whether to distill a sentence-transformers compatible model.
                 The distillation will happen during fitting of the topic model.
                 NOTE: Only works if `embedding_model` is a string.
        distill_kwargs: Keyword arguments to pass to the distillation process
                        of `model2vec.distill.distill`
        distill_vectorizer: A CountVectorizer used for creating a custom vocabulary
                            based on the same documents used for topic modeling.
                            NOTE: If "vocabulary" is in `distill_kwargs`, this will be ignored.

    Examples:
    To use Model2Vec, simply pass it to the KeyBERT model:

    ```python
    from keybert import KeyBERT
    from model2vec import StaticModel

    embedding_model = StaticModel.from_pretrained("minishlab/potion-base-8M")

    # Extract keywords
    kw_model = KeyBERT(embedding_model)
    keywords = kw_model.extract_keywords(my_docs)
    ```

    If you want to distill a sentence-transformers model with the vocabulary of the documents,
    run the following:

    ```python
    from keybert.backend import Model2VecBackend

    embedding_model = Model2VecBackend("sentence-transformers/all-MiniLM-L6-v2", distill=True)
    ```
    """
    def __init__(self, embedding_model: Union[str, StaticModel], distill: bool = ..., distill_kwargs: dict = ..., distill_vectorizer: str = ...) -> None:
        ...

    def embed(self, documents: List[str], verbose: bool = ...) -> np.ndarray:
        """Embed a list of n documents/words into an n-dimensional
        matrix of embeddings.

        Arguments:
            documents: A list of documents or words to be embedded
            verbose: Controls the verbosity of the process

        Returns:
            Document/words embeddings with shape (n, m) with `n` documents/words
            that each have an embeddings size of `m`
        """
        ...
