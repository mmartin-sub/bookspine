name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install Hatch
      run: uv tool install hatch

    - name: Create Hatch environment
      run: hatch env create

    - name: Run linting checks
      run: |
        hatch run lint
        hatch run style
        hatch run typing

    - name: Run tests with coverage
      run: hatch run test-cov
      env:
        COVERAGE_FILE: .coverage.${{ matrix.python-version }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: .coverage.${{ matrix.python-version }}
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install UV
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install Hatch
      run: uv tool install hatch

    - name: Create Hatch environment
      run: hatch env create

    - name: Run security checks
      run: |
        # Install bandit for security scanning
        uv pip install bandit
        # Run security scan
        bandit -r bookspine/ -f json -o bandit-report.json || true
        # Check for known vulnerabilities
        uv pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install UV
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install Hatch
      run: uv tool install hatch

    - name: Create Hatch environment
      run: hatch env create

    - name: Build package
      run: hatch build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: pypi
      url: https://pypi.org/p/bookspine

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install UV
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Install Hatch
      run: uv tool install hatch

    - name: Create Hatch environment
      run: hatch env create

#    - name: Publish to PyPI
#      run: hatch publish
 #     env:
#        HATCH_INDEX_USER: __token__
#        HATCH_INDEX_AUTH: ${{ secrets.PYPI_API_TOKEN }}
